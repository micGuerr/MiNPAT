#!/bin/bash

# Requirements for this script
#  installed versions of: FSL (including python with numpy, needed to run aff2rigid - part of FSL)
#  installed version of DTITK

# ---------------------------------------------------------------------------------
# Usage Description Function
# ---------------------------------------------------------------------------------

script_name=$(basename "${0}")

Usage() {
	cat <<EOF

${script_name}:	Tool which attempts to correct the bias field of the structural images.
		It requires a pre-defined directory structure. This can be obtained using "set_longAn" tool.

Usage: ${script_name}
  --wrkdir=<working_dir>
  --in=<inputVolume_list>
  --subjid=<subjID_list>
  [--t2w=<inputT2wVolume_list>]
  [--sessid=<sessID_list>]
  [--n4]
  [--noCleanUp]

========================

<working_dir>:		Should be the same used in set_longAn.

<inputVolume_list>:	A text file containing a list of paths to the input structural images.
			Full path is recommended. T1w image type is assumed by default.
			The number of lines MUST be equal to the product of the line number of
			<subjID_list> and <sessID_list>.

<subjID_list>		List of subject's IDs. Should be consistent with those used in set_longAn.

<sessID_list>		List of session's IDs. Should be consistent with the one used in set_longAn.

--t2w: 			Input list of T2w image.

--n4:			Use N4BiasFieldCorrection approach (it does not need the T2w image).

--noCleanUp:		Keep all temporary files. Recommended for debagging only


EOF
}

# Allow script to return a Usage statement, before any other output or checking
if [ "$#" = "0" ]; then
    Usage
    exit 1
fi

# ------------------------------------------------------------------------------
#  Verify required environment variables are set and log value
# ------------------------------------------------------------------------------

if [ -z $FSLDIR ] ; then
  echo "${script_name}: ABORTING: FSLDIR environment variable must be set"
  exit 1
fi

if [ -z "${DTITK_ROOT}" ]
then
        echo "${script_name}: ABORTING: DTITK_ROOT environment variable must be set"
        exit 1
fi

# source dtitk_common.sh
. ${DTITK_ROOT}/scripts/dtitk_common.sh

################################## SUPPORT FUNCTIONS ###################################################

# funtion for parsing options
getopt1() {
	sopt="$1"
	shift 1
	for fn in $@; do
		if [ `echo $fn | grep -- "^${sopt}=" | wc -w` -gt 0 ] ; then
			echo $fn | sed "s/^${sopt}=//"
			return 0
		fi
	done
}

# funtion for parsing options
getopt2() {
        sopt="$1"
        shift 1
        for fn in $@; do
                if [ `echo $fn | grep -- "^${sopt}" | wc -w` -gt 0 ] ; then
			echo 1
                        return 0
                fi
        done
	echo 0
}

# function for perform acpc
doBiasCorrect() {

	# increment the counter
	count=$(($count + 1))
	# Read the corresponding input filename
	T1wInput=`sed "${count}!d" $VolIn`
	if [ ! -z $T2wVolIn ] ; then T2wInput=`sed "${count}!d" $T2wVolIn` ; fi
	# Define the output directory
	if [ -z ${Sess} ] ; then SessDir="$WD/anat/preFS/${Subj}"
	else SessDir="$WD/anat/preFS/${Subj}/${Sess}" ; fi
	
	# Define the T1w output
	OutDir="${SessDir}/T1w"	
	# and T2w, if needed
	if [ ! -z $T2wVolIn ] ; then T2wOutDir="${SessDir}/T2w" ; fi


	if [ ! -d $OutDir ] ; then mkdir $OutDir ; fi
	if [ ! -d $T2wOutDir ] && [ ! -z $T2wVolIn ] ; then mkdir $T2wOutDir ; fi

	# Extract the Input base name without exension
	InName=`basename "$T1wInput"`
	InFileCp="${OutDir}/${InName}"	# use ... to create a link of the input file in the wrk dir
	InName=`getTVPrefix $InName` # Remove the extension for the output base name definition
	# Define the restored output name
	Output="${OutDir}/${InName}_restore"

	# Do the same for T2w
	if [ ! -z $T2wVolIn ] ; then
		T2wInName=`basename "$T2wInput"`
		InT2wFileCp="${T2wOutDir}/${T2wInName}"	# use ... to create a link of the input file in the wrk dir
		T2wInName=`getTVPrefix $T2wInName` # Remove the extension for the output base name definition
		T2wOutput="${T2wOutDir}/${T2wInName}_restore"
	fi
	
	# define the base command
	bcCmd="biasField_rm --in=${T1wInput} --out=${Output}"

	# add features if needed
	if [ ! -z $T2wVolIn ]; then bcCmd="${bcCmd} --t2w=${T2wInput} --outT2w=${T2wOutput}" ; fi
	if [ ! $DoN4 -eq 0 ]; then bcCmd="${bcCmd} --n4" ;fi
	if [ ! $DontClean -eq 0 ]; then bcCmd="${bcCmd} --noCleanUp" ; fi
	
	# Run the ACPC alignment
	echo "Subject $Subj, Session $Sess"
	$bcCmd
	
}

defaultopt() {
    echo $1
}

################################### OUTPUT FILES #####################################################


################################### OPTIONS PARSING ###################################################

WD=`getopt1 "--wrkdir" $@`  # "$1"
VolIn=`getopt1 "--in" $@`  # "$2"
SubjID=`getopt1 "--subjid" $@`  # "$3"
SessID=`getopt1 "--sessid" $@`  # "$4"
T2wVolIn=`getopt1 "--t2w" $@`  # "$5"
DoN4=`getopt2 "--n4" $@`  # "$6"
DontClean=`getopt2 "--noCleanUp" $@`  # "$7"


################################# DO WORK #############################################################

# First check consistency of the input volume list, subject ID list and session ID list
nVolIn_lines=`wc -l ${VolIn} | awk '{ print $1 }'` # lnegth of the input volume file
nSubj_lines=`wc -l $SubjID | awk '{ print $1 }'` # length of the subject ID file
if [ -z $SessID ] ; then
	nSubjxSess_lines=$nSubj_lines
else
	nSess_lines=`wc -l $SessID | awk '{ print $1 }'` # length of the session ID file
	nSubjxSess_lines=$(($nSubj_lines * $nSess_lines)) # product of the lengths
fi
if [ ! $nVolIn_lines -eq $nSubjxSess_lines ] ; then
  echo "Error: length of ${VolIn} must be consistent with subject and session lists."
  exit 1
fi
# check also fir the T2w list if necessary
if [ ! -z $T2wVolIn ] ; then
	nT2wVolIn_lines=`wc -l ${T2wVolIn} | awk '{ print $1 }'` # lnegth of the T2w input volume file
	if [ ! $nVolIn_lines -eq $nT2wVolIn_lines ] ; then
		echo "Error: length of ${VolIn} and ${T2wVolIn} must be consistent."
	fi
fi


# Loop over the input file lines
count=0 # counter to read from input volume list
# loop over subject list
while IFS1= read -r Subj ; do
	if [ ! -z $SessID ] ; then
		# loop over session list if exists
		while IFS2= read -r Sess ; do
			# Do the ACPC alignment
			doBiasCorrect
		done  < "$SessID"
	else
		# Do the ACPC alignment
		doBiasCorrect
	fi
done < "$SubjID"










