#!/bin/bash

# Requirements for this script
#  installed versions of: FSL (including python with numpy, needed to run aff2rigid - part of FSL)
#  installed version of DTITK
#  installed version of ANTs or separately downloaded N4BiasFieldCorrection if N4-based correction to be used

# ---------------------------------------------------------------------------------
# Usage Description Function
# ---------------------------------------------------------------------------------

script_name=$(basename "${0}")

Usage() {
	cat <<EOF

${script_name}: Attempts to correct for bias field inhomogeneities.

Usage: ${script_name}
  --in=<invol>
  [--t2w=<inT2w>]
  [--out=<ouput>]
  [--outT2w=<outT2w>]
  [--n4]
  [--noCleanUp]

========================

<invol>: 	Is the input volume. A T1w image is expected.

<inT2w>: 	Optional T2w image.

--noReorient: 	Don't run reorientation.
		Reorientation matchs the orientaion of the standard template. It makes the 
		images appear "the same way around" in FSLview.
		Check https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Orientation%20Explained
		for more info.

--out:		Specify the folder and ouput basename. If not specified the output
		will be saved in the current directory. The unbiased volume will 
		be named  <invol>_unbias.

--outT2w:	Specify the folder in which to store T2w results. Only use in combination with --t2w flag

--noBet		The input image has already brain extracted or you want to perform the bias correction 
		with the brain.

--n4:		Use N4BiasFieldCorrection approach (it does not need the T2w image).

--noCleanUp:	Keep all temporary files. Recommended for debagging only

EOF
}

# Allow script to return a Usage statement, before any other output or checking
if [ "$#" = "0" ]; then
    Usage
    exit 1
fi

# ------------------------------------------------------------------------------
#  Verify required environment variables are set and log value
# ------------------------------------------------------------------------------

if [ -z $FSLDIR ] ; then
  echo "${script_name}: ABORTING: FSLDIR environment variable must be set"
  exit 1
fi

if [ -z "${DTITK_ROOT}" ]
then
        echo "${script_name}: ABORTING: DTITK_ROOT environment variable must be set"
        exit 1
fi

# source dtitk_common.sh
. ${DTITK_ROOT}/scripts/dtitk_common.sh

################################## SUPPORT FUNCTIONS ###################################################

# funtion for parsing options
getopt1() {
	sopt="$1"
	shift 1
	for fn in $@; do
		if [ `echo $fn | grep -- "^${sopt}=" | wc -w` -gt 0 ] ; then
			echo $fn | sed "s/^${sopt}=//"
			return 0
		fi
	done
}

# funtion for parsing options
getopt2() {
        sopt="$1"
        shift 1
        for fn in $@; do
                if [ `echo $fn | grep -- "^${sopt}" | wc -w` -gt 0 ] ; then
			echo 1
                        return 0
                fi
        done
	echo 0
}


# perform smoothing
quick_smooth() {
	# This is similar to fslmaths -s 20 but slightly faster
	in=$1
	out=$2
	fslmaths $in -subsamp2 -subsamp2 -subsamp2 -subsamp2 vol16
	flirt -in vol16 -ref $in -out $out -noresampblur -applyxfm -paddingsize 16
	imrm vol16
}

# perform a rough bias field estimation and approximate brain extraction
gross_biascorr() {

	input=$1
	outdir=$2

	filename=`basename "${input}"`
	prefix=`getTVPrefix $filename`	

	# outputs
	InVol_smth="${outdir}/${prefix}_s20" # smoothed image
	InVol_hpf="${outdir}/${prefix}_hpf" # high-pass filtered image
	InVol_hpf_brain="${outdir}/${prefix}_hpf_brain" # hpf brain (this is updated during computation)
	InVol_hpf_brain_msk="${outdir}/${prefix}_hpf_brain_mask" # hpf brain mask (this is updated during computation)
	InVol_hpf_brain_smth="${outdir}/${prefix}_hpf_brain_s20" # hpf brain smoothed
	InVol_hpf_brain_msk_smth="${outdir}/${prefix}_hpf_brain_mask_s20" # hpf brain mask smoothed
	roughBiasfield="${outdir}/${prefix}_biasfield_rough" # rough bias field estimation 
	roughBiascorr="${outdir}/${prefix}_restore_rough_brain" # rough bias corrected (brain)

	# run smoothing
	echo "Quick smooth..." | tee -a $logFile
	quick_smooth ${input} ${InVol_smth}
	# approximate correction by ratio
	fslmaths ${input} -div ${InVol_smth} ${InVol_hpf}
	if [ $NoBet -eq 0 ] ; then
		echo "Running BET..." | tee -a $logFile
		# perform a gross brain ecxtraction.
		bet ${InVol_hpf} ${InVol_hpf_brain} -m -f 0.3
	else
		fslmath ${InVol_hpf} ${InVol_hpf_brain} # use this instead of copy as you don't need to specify extension
	fi
	echo "Quick smoothing again..." | tee -a $logFile
	fslmaths ${input} -mas ${InVol_hpf_brain} ${InVol_hpf_brain_smth}
	quick_smooth ${InVol_hpf_brain_smth} ${InVol_hpf_brain_smth}
	quick_smooth ${InVol_hpf_brain_msk} ${InVol_hpf_brain_msk_smth}
	fslmaths ${InVol_hpf_brain_smth} -div ${InVol_hpf_brain_msk_smth} -mas ${InVol_hpf_brain} -dilall ${roughBiasfield}
	fslmaths ${input} -div ${roughBiasfield} ${roughBiascorr}
	if [ $NoBet -eq 0 ] ; then
		echo "Running BET once more..." | tee -a $logFile
		# perform a gross brain ecxtraction.
		bet ${roughBiascorr} ${InVol_hpf_brain} -m -f 0.2
		fslmaths ${roughBiascorr} -mas ${InVol_hpf_brain} ${roughBiascorr}
	fi
	# make sure the overall scaling doesn't change (equate medians)
	med0=`fslstats ${input} -k ${roughBiascorr} -P 50`;
	med1=`fslstats ${roughBiascorr} -k ${InVol_hpf_brain} -P 50`;
	fslmaths ${roughBiascorr} -div $med1 -mul $med0 ${roughBiascorr}
}


defaultopt() {
    echo $1
}

################################################### OUTPUT FILES #####################################################

# All except $OutVol variables, are saved in a directory created ad-hoc, named tmpUnbias.
# $OutMat and tmpUnbias are created in the current directory or that specified by --out flag:

##	Bias correction via Fast:
#	$biasEstimation is the final bias field estimation
#	$InVol_hpf_brain is a temporary brain extraction. Useful to check to make sure everything went good
#	(If the brain extraction went catstrofically bed, there are chances the algorithm failed).
#	"OutVol"  (the ACPC aligned image)


################################### OPTIONS PARSING ###################################################

VolIn=`getopt1 "--in" $@`  # "$1"
T2wVolIn=`getopt1 "--t2w" $@`  # "$2"
Out=`getopt1 "--out" $@`  # "$3"
OutT2w=`getopt1 "--outT2w" $@`  # "$4"
NoBet=`getopt2 "--noBet" $@`  # "$5"
DoN4=`getopt2 "--n4" $@`  # "$6"
DontClean=`getopt2 "--noCleanUp" $@`  # "$7"

# Default parameters

# input root
InFileName=`basename "${VolIn}"`
InPrefx=`getTVPrefix $InFileName`

# The outputs (T1w)
if [ -z $Out ] ; then
        OutDir=$PWD;
        OutVol="${OutDir}/${InPrefx}_restore.nii.gz"
        OutTmpDir="${OutDir}/tmpUnbias"
else
        OutDir=`dirname "$Out"`
        OutVol=$Out
        OutTmpDir="${OutDir}/tmpUnbias"
fi

# The outputs (T2w)
if [ ! -z $T2wVolIn ] ; then
	# T2w input root
	T2wInFileName=`basename "${T2wVolIn}"`
	T2wInPrefx=`getTVPrefix $T2wInFileName`
	if [ -z $OutT2w ]  ; then
		OutT2wDir=$OutDir
		T2wOutVol="${OutT2wDir}/${T2wInPrefx}_restore.nii.gz"
		OutT2wTmpDir=${OutTmpDir}
	else
		OutT2wDir=`dirname "$OutT2w"`		
		T2wOutVol=$OutT2w
		OutT2wTmpDir="${OutT2wDir}/tmpUnbias"
	fi
fi

# Define the log file
logFile="${OutTmpDir}/log.txt"

################################## DO WORK ###########################################################

# Creat the folder to store intermediate results
if [ ! -d $OutTmpDir ] ; then mkdir $OutTmpDir ; fi
# Do the same  for T2w image if present
if [ ! -z $T2wVolIn ] ; then
	if [ ! -z $OutT2w ]  ; then
		if [ ! -d $OutT2wTmpDir ] ; then mkdir $OutT2wTmpDir; echo ciao ; fi
	fi
fi

# Create the log file
> $logFile
echo "Running Bias field correction" | tee -a $logFile
echo "Input: ${VolIn}" | tee -a $logFile
echo "Output directory: ${OutDir}" | tee -a $logFile
echo " " | tee -a $logFile

if [ ! $DoN4 -eq 0 ] ; then

	#### Bias field correction using N4 method ####
	echo "N4 method selected: " | tee -a $logFile

	echo "N4BiasFieldCorrection -d 3 -i $VolIn -o $OutVol"
elif [ ! -z $T2wVolIn ] ; then

	#### Bias field correction using T2w image ####
	echo "Correction via T2w image: " | tee -a $logFile
	
	## First step: Brain extraction via gross bias correction for T1w and T2w
	echo "Part One - Brain extraction via gross bias field correction." | tee -a $logFile
	echo "------------------------------------------------------------" | tee -a $logFile
	echo "T1w brain extraction" | tee -a $logFile
	gross_biascorr $VolIn 	 $OutTmpDir # T1w
	echo "T2w brain extraction" | tee -a $logFile
	gross_biascorr $T2wVolIn $OutT2wTmpDir # T2w

	# Output of previous step
	T1wBrain_mask="${OutTmpDir}/${InPrefx}_hpf_brain_mask"
	T2wBrain_mask="${OutT2wTmpDir}/${T2wInPrefx}_hpf_brain_mask"
	
	# Mask the input images
	T1wBrain="${OutTmpDir}/${InPrefx}_brain"
	T2wBrain="${OutT2wTmpDir}/${T2wInPrefx}_brain"
	fslmaths $VolIn -mas $T1wBrain_mask $T1wBrain
	fslmaths $T2wVolIn -mas $T2wBrain_mask $T2wBrain

	# Create folder for T2w to T1w registration file storing
	T2w2T1wRegDir="${OutT2wDir}/T2w2T1wReg"
	if [ ! -d $T2w2T1wRegDir ] ; then mkdir $T2w2T1wRegDir ; fi
	
	# Register the T2w image to the T1w image using border based registration
	T2w2T1w="${T2w2T1wRegDir}/t2w2t1w"
	epi_reg --epi=${T2wBrain}  --t1=${VolIn}  --t1brain=${T1wBrain} --out=${T2w2T1w} --pedir=-y -v
	# Apply the registration
	applywarp --rel --interp=spline --in=${T2wVolIn} --ref=${VolIn} --premat=${T2w2T1w}.mat --out=${T2w2T1w} -v
	
	# Compute Y = sqrt( |T1w * phi(T2w)|) where phi(.) is the transformation from T2w to T1w space
	T1wXT2w="${OutTmpDir}/${InPrefx}_sqrtT1wT2w"
	fslmaths ${VolIn} -mul ${T2w2T1w} -abs -sqrt ${T1wXT2w} -odt float
	
	# Mask Y
	fslmaths ${T1wXT2w} -mas ${T1wBrain} ${T1wXT2w}_brain
	
	# Compute Y's mean within the brain and use it for normalization
	M=`fslstats ${T1wXT2w}_brain -M`
	fslmaths ${T1wXT2w}_brain -div ${M} ${T1wXT2w}_brain_norm

	# Use a 5mm HWFM filter to first smooth brain mask
	mask_smth="${T1wBrain_mask}_s5"
	fslmaths ${T1wXT2w}_brain_norm -bin -s 5 ${mask_smth}
	# smooth the normalized Y and divide by the smoothed mask to compasate for edge smoothing
	fslmaths ${T1wXT2w}_brain_norm -s 5 -div ${mask_smth} ${T1wXT2w}_brain_norm_s5
	# find Z: the modulated version of Y dividing normalized Y by its smoothed brain version
	fslmaths ${T1wXT2w}_brain_norm -div  ${T1wXT2w}_brain_norm_s5 ${T1wXT2w}_brain_norm_modulate
	
	# Compute k=Mean(Z) - std(Z)/2.k is used to isolate values far from the mean in the negartive direction
	S=`fslstats ${T1wXT2w}_brain_norm_modulate -S`
	M2=`fslstats ${T1wXT2w}_brain_norm_modulate -M`
	low=$(python -c "print ${M2} - ${S}*0.5")
	
	# threshold Z with k, then bin, ero, *255. Fill also the holes
	fslmaths ${T1wXT2w}_brain_norm_modulate -thr ${low} -bin -ero -mul 255 ${T1wXT2w}_brain_norm_modulate_mask
	fslmaths ${T1wXT2w}_brain_norm_modulate_mask -fillh ${T1wXT2w}_brain_norm_modulate_mask
	
	# Mask norm Y and apply mean dilatation everywhere
	RawBias=${OutTmpDir}/${InPrefx}_biasfield_raw
	fslmaths ${T1wXT2w}_brain_norm -mas ${T1wXT2w}_brain_norm_modulate_mask -dilall ${RawBias}
	# Compute the final version of the bias field estimate by smoothing last step output
	Biasfield=${OutTmpDir}/${InPrefx}_biasfield_final
	fslmaths ${RawBias} -s 5 ${Biasfield}
	
	# Copute the restored versions of T1w and T2w images using the bias field estimation
	fslmaths ${VolIn} -div ${Biasfield} ${OutVol} -odt float
	fslmaths ${T2wVolIn} -div ${Biasfield} ${T2wOutVol} -odt float
	
else

	#### Bias field correction using fsl_anat approach ####
	echo "FAST based correction method: " | tee -a $logFile
	echo " " | tee -a $logFile
	
	# inputs
	type=1 # correspond to T1w image
	niter=5
	smooth=10
	
	## First step: very gross bias fild correction
	echo "Part One - gross bias correction." | tee -a $logFile
	echo "---------------------------------" | tee -a $logFile
	gross_biascorr $VolIn $OutTmpDir

	## Second step: more accurate bias correction via FLIRT
	echo "Part Two - more accurate correction via FAST." | tee -a $logFile
	echo "---------------------------------" | tee -a $logFile
	# outputs
	initfast="${OutTmpDir}/${InPrefx}_initfast"
	initfast_out="${OutTmpDir}/${InPrefx}_initfast_restore"
	initfast2="${OutTmpDir}/${InPrefx}_initfast2"
	initfast_out2="${OutTmpDir}/${InPrefx}_initfast2_restore"

	# run fast
	echo "***FAST 1-st instance ****" | tee -a $logFile
	fast -o ${initfast} -l ${smooth} -b -B -t $type --iter=${niter} --nopve --fixed=0 -v ${roughBiascorr} >> $logFile
	echo "***FAST 2-nd instance ****" | tee -a $logFile
	fast -o ${initfast2} -l ${smooth} -b -B -t $type --iter=${niter} --nopve --fixed=0 -v ${initfast_out} >> $logFile
	
	## Second step: more accurate bias correction via FLIRT
	echo "Part Three - final correction." | tee -a $logFile
	echo "---------------------------------" | tee -a $logFile
	# outputs
	fast="${OutTmpDir}/${InPrefx}_fast"
	fast_out="${OutTmpDir}/${InPrefx}_fast_restore"
	fast_total_bias="${OutTmpDir}/${InPrefx}_fast_totbias"
	InVol_hpf_brain_msk_ero="${OutTmpDir}/${InPrefx}_hpf_brain_mask_ero4"
	biasEstimation="${OutTmpDir}/${InPrefx}_biasfield_final"

	# run fast a third time
	echo "***FAST 3-rd instance ****" | tee -a $logFile
	fast -o ${fast} -l ${smooth} -b -B -t $type --iter=${niter} --nopve --fixed=0 -v ${initfast_out2} >> $logFile
	
	# "Extrapolating bias field from central region"
	fslmaths ${VolIn} -div ${fast_out} -mas ${InVol_hpf_brain} ${fast_total_bias}
	fslmaths ${InVol_hpf_brain} -bin -ero -ero -ero -ero  ${InVol_hpf_brain_msk_ero}
    	fslmaths ${fast_total_bias} -sub 1 ${fast_total_bias} 
	fslsmoothfill -i ${fast_total_bias} -m ${InVol_hpf_brain_msk_ero} -o ${biasEstimation}
	fslmaths ${biasEstimation} -add 1 ${biasEstimation} 
    	fslmaths ${fast_total_bias} -add 1 ${fast_total_bias} 
    	#fslmaths $totbias -sub 1 -mas $mask_ero -dilall -add 1 (shouldn't be 2 ?!) $biasEstimation  # alternative to fslsmoothfill
    	fslmaths ${VolIn} -div ${biasEstimation} ${OutVol}

	## An alternative to "Extrapolating bias field from central region" step could be the following:
	#fslmaths ${VolIn} -div ${fast_out} -mas ${InVol_hpf_brain} -sub 1 ${fast_total_bias}
	#M=`${fast_total_bias} -M`
	#fslmaths ${fast_total_bias} -div $M ${fast_total_bias}_norm
	#fslmaths ${InVol_hpf_brain} -bin -ero -ero -ero -ero  ${InVol_hpf_brain_msk_ero}
	#fslmaths ${InVol_hpf_brain_msk_ero} -s 5 ${InVol_hpf_brain_msk_ero}_s5
	#fslmaths ${fast_total_bias}_norm -mas ${InVol_hpf_brain_msk_ero}  -s 5 -div ${InVol_hpf_brain_msk_ero}_s5 -dilall $biasEstimation
	#fslmaths ${VolIn} -div ${biasEstimation} ${OutVol}
	

	if [ $DontClean -eq 0 ] ; then
		echo "Remove some temporary files" | tee -a $logFile
		imrm ${InVol_smth}		
		imrm ${InVol_hpf}		
		imrm ${OutTmpDir}/${InPrefx}_hpf_brain_*
		imrm ${roughBiasfield}
		imrm ${roughBiascorr}
		imrm ${OutTmpDir}/${InPrefx}_initfast*
		imrm ${OutTmpDir}/${InPrefx}_fast*
		imrm ${OutTmpDir}/${InPrefx}_biasfield_final_*
	fi

	echo "Bias correction done!"
fi

















