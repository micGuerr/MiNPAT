function [rfield, unwarp_b0, acqp_file, status] = runTopup(dwiData, config, baseName)
% 
% Runs FSL's topup utility
%
% Usage:
%  [topup_outp, status] = runTopup(dwiData)
% 
% Input
%   dwiData         structure...
%   config          ...
%   baseName        is the path and base name in which to save topup output
% 
% Output:
%   rfield  
%   unwarp_b0   
%   acqp_file   structure in which are stored the paths to topup outputs.
%   status      numeric value describing the status of the executed system
%               command.
% 
% Author:
%   Michele Guerreri (m.guerreri@ucl.ac.uk)

global FSLPATH

%% First thing, let's parse the DWI acquisition information. 
%  Let's check everything needed is there.

acqs = fieldnames(dwiData);
n_acqs = length(acqs);

% The fields "vol", "bval", "bvec", "sc" are expected for each acquisition
for ii = 1 : n_acqs
    In = dwiData.(acqs{ii}); % make things easier to read
    if ~isfield(In, 'vol') || ...
            ~isfield(In, 'bval') || ...
            ~isfield(In, 'bvec') || ...
            ~isfield(In, 'sc')
        error('''vol'', ''bval'', ''bvec'' or ''sc'', missing in acquisition %s !!', ...
            acqs{ii} );
    end
end

% Let's also check if topup configuration file is input. If not use default
if isempty(config)
    config = fullfile(FSLPATH,'src','topup','flirtsch','b02b0.cnf');
end

%% Next, check the output folder exists. If not create it

% extract topup folder from the baseName
[topupDir, topupBname] = fileparts(baseName);

if ~exist(topupDir, 'dir')
    mkdir(topupDir);
end

%% Now, for each acquisition we need to extract the b0s and store some extra info

% Temporary structure used to store b0 info
b0 = struct();

% Loop over the acquisitions
for ii = 1 : n_acqs
    In = dwiData.(acqs{ii}); % make things easier to read
    % the extracted b0s are saved as 4d vol named:
    tmp_b0_path = fullfile(topupDir, sprintf('b0_%s.nii.gz', acqs{ii}));
    % extract the b0s
    Out = struct();
    [Out.b0idx, ... 
        Out.n_b0, Out.acqp] = extractB0s(In.vol, In.bval, In.sc, tmp_b0_path);
    Out.b0s = tmp_b0_path;
    b0.(acqs{ii}) = Out;
end

%% Let's merge the b0 volumes together

% the output name is:
all_b0s_path = fullfile(topupDir, 'all_b0.nii.gz');
tmp_b0s = []; % used to store each path
if ~exist
for ii = 1 : n_acqs
    tmp_b0s = [tmp_b0s ' ' b0.(acqs{ii}).b0s ];
end
mrg_cmd = sptintf('fslmerge -t %s %s', all_b0s_path, tmp_b0s);
mrg_status = runSystemCmd(mrg_cmd, 1);

%% Now let's put the acquisition parameters in a file

acqp_file = fullfile(topupDir, 'acqp.txt');
% check if the file already exist
if ~exist(acqp_file, 'file')
    % open the file
    fid = fopen(acqp_file, 'w+');
    for ii = 1 : n_acqs
        In = b0.(acqs{ii});
        % loop over the b0s
        for jj = 1 :  In.n_b0
            % print the parameters
            fprintf(fid, '%s %s %s %s\n', In.acqp(:) );
        end
    end
    fclose(fid);
else
    warning('file %s already exist. The existing  copy will be used in the analysis', ...
        acqp_file);
end

%% Finally we can run the Topup command

% Define the outputs
rfield = fullfile('%s_rfield.nii.gz', baseName);
unwarp_b0 = fullfile('%s_b0unwarp.nii.gz', baseName);

% there are two ways to obtain the the unwarped images, depends on whether
% the "blip-Up" and "blip-down" images ave exactly the same acquisition params or not

% by default we use the non "Least-Squares Restoration" method
do_lsr = 0;

% Check if the acquisition protocols are the same
is_eq = 1;
for ii = 1 : n_acqs-1
    In1 = dwiData.(acqs{ii});
    In2 =dwiData.(acqs{ii+1});
    is_eq_bval = isequal(In1.bval, In2.bval);
    is_eq_bvec = isequal(In1.bvec, In2.bvec);
    is_eq = is_eq * is_eq_bval * is_eq_bvec;
end
% If everything is equal then do LSR.
if is_eq
    do_lsr = 1;
end

if do_lsr
    [status] = runTopup_lsr(all_b0s_path, acqp_file, b0, config, baseName, rfield, unwarp_b0);
else
    [status] = runTopup_jac(all_b0s_path, acqp_file, config, baseName, rfield, unwarp_b0);
end






